// <copyright file="ConditionalRule.cs" company="Syncfusion Inc">
// Copyright (c) Syncfusion Inc. All rights reserved.
// </copyright>

/*
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Model
{
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    ///     The conditional rule properties include, field id and isChecked.
    /// </summary>
    [DataContract]
    public class ConditionalRule
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="ConditionalRule" /> class.
        /// </summary>
        /// <param name="fieldId">Gets or sets the FieldId.</param>
        /// <param name="isChecked">Gets or sets the isChecked.</param>
        /// <param name="value">Gets or sets the value.</param>
        public ConditionalRule(string fieldId = default, bool isChecked = default, string value = default)
        {
            this.FieldId = fieldId;
            this.IsChecked = isChecked;
            this.Value = value;
        }

        /// <summary>
        ///     Gets or sets the fieldId.
        /// </summary>
        /// <value>Gets the value of fieldId.</value>
        [DataMember(Name = "fieldId", EmitDefaultValue = false)]
        public string FieldId { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether the field is checked or not.
        /// </summary>
        /// <value>Gets or sets a value indicating whether is checked.</value>
        [DataMember(Name = "isChecked", EmitDefaultValue = false)]
        public bool IsChecked { get; set; }

        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        /// <value>Gets the conditional rule value.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        ///     Returns the JSON string presentation of the object.
        /// </summary>
        /// <returns>JSON string presentation of the object.</returns>
        public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}
