/*
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Api
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.IO;
    using System.Linq;
    using System.Threading.Tasks;
    using BoldSign.Api.Resources;
    using BoldSign.Model;
    using RestSharp;

    /// <summary>
    ///  Represents a collection of functions to interact with the API endpoints. The functions perform actions such as sending document to sign, getting document list, deleting a document, downloading audit log, downloading a document, changing access code of the desired signer and so on.
    /// </summary>
    public class DocumentClient : IDocumentClient
    {
        // verify the Filesize is within 100MB
        private const long MaxFileSize = 104857600;

        private ExceptionFactory exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="DocumentClient" /> class.
        /// </summary>
        /// <returns></returns>
        public DocumentClient(string basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DocumentClient" /> class.
        /// </summary>
        /// <returns></returns>
        public DocumentClient()
        {
            this.Configuration = Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DocumentClient" /> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentClient(Configuration configuration = null)
        {
            this.Configuration = configuration ?? Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;

        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DocumentApi" /> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="apiClient">An instance of ApiClient</param>
        /// <returns></returns>
        public DocumentClient(ApiClient apiClient)
        {
            this.Configuration = (Configuration)apiClient.Configuration;
            this.Configuration.ApiClient = apiClient;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath() => this.Configuration.ApiClient.RestClient.BaseUrl.ToString();

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this.exceptionFactory != null && this.exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return this.exceptionFactory;
            }
            set => this.exceptionFactory = value;
        }

        /// <summary>
        ///     Changes the access code for the desired document signer by verifying the email ID of the signer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Gets or sets the document id.</param>
        /// <param name="emailId">Gets or sets the signer email.</param>
        /// <param name="newAccessCode">The new access code.</param>
        /// <param name="signerOrder">
        ///     Gets or sets the signer&#39;s order.  When signer order is enabled for a document, this order is
        ///     used to target that particular order with given signer email. (optional)
        /// </param>
        /// <returns></returns>
        public void ChangeAccessCode(string documentId, string emailId, string newAccessCode, int? signerOrder = default)
        {
            this.ChangeAccessCodeWithHttpInfo(documentId, emailId, newAccessCode, signerOrder);
        }

        /// <summary>
        ///    Changes the access code for the desired document signer by verifying the email ID of the signer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Gets or sets the document id.</param>
        /// <param name="emailId">Gets or sets the signer email.</param>
        /// <param name="newAccessCode">The new access code.</param>
        /// <param name="signerOrder">
        ///     Gets or sets the signer&#39;s order.  When signer order is enabled for a document, this order is
        ///     used to target that particular order with given signer email. (optional)
        /// </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ChangeAccessCodeWithHttpInfo(string documentId, string emailId, string newAccessCode, int? signerOrder = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->ChangeAccessCode");
            }

            // verify the required parameter 'emailId' is set
            if (emailId == null)
            {
                throw new ApiException(400, "Missing required parameter 'emailId' when calling DocumentApi->ChangeAccessCode");
            }

            // verify the required parameter 'accessCodeDetails' is set
            if (newAccessCode == null)
            {
                throw new ApiException(400, "Missing required parameter 'newAccessCode' when calling DocumentApi->ChangeAccessCode");
            }

            var localVarPath = "/v1/document/changeAccessCode";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var accessCodeDetails = new AccessCodeDetails(newAccessCode);
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DocumentId", documentId)); // query parameter

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EmailId", emailId)); // query parameter

            if (signerOrder == null || signerOrder == 0)
            {
                signerOrder = 1;
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ZOrder", signerOrder)); // query parameter

            if (accessCodeDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accessCodeDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accessCodeDetails; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ChangeAccessCode", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///    Changes the access code for the desired document signer by verifying the email ID of the signer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Gets or sets the document id.</param>
        /// <param name="emailId">Gets or sets the signer email.</param>
        /// <param name="newAccessCode">The new access code.</param>
        /// <param name="signerOrder">
        ///     Gets or sets the signer&#39;s order.  When signer order is enabled for a document, this order is
        ///     used to target that particular order with given signer email. (optional)
        /// </param>
        /// <returns>Task of void</returns>
        public async Task ChangeAccessCodeAsync(string documentId, string emailId, string newAccessCode, int? signerOrder = default)
        {
            await this.ChangeAccessCodeAsyncWithHttpInfo(documentId, emailId, newAccessCode, signerOrder);
        }

        /// <summary>
        ///    Changes the access code for the desired document signer by verifying the email ID of the signer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Gets or sets the document id.</param>
        /// <param name="emailId">Gets or sets the signer email.</param>
        /// <param name="newAccessCode">The new access code.</param>
        /// <param name="signerOrder">
        ///     Gets or sets the signer&#39;s order.  When signer order is enabled for a document, this order is
        ///     used to target that particular order with given signer email. (optional)
        /// </param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> ChangeAccessCodeAsyncWithHttpInfo(string documentId, string emailId, string newAccessCode, int? signerOrder = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->ChangeAccessCode");
            }

            // verify the required parameter 'emailId' is set
            if (emailId == null)
            {
                throw new ApiException(400, "Missing required parameter 'emailId' when calling DocumentApi->ChangeAccessCode");
            }

            // verify the required parameter 'accessCodeDetails' is set
            if (newAccessCode == null)
            {
                throw new ApiException(400, "Missing required parameter 'accessCodeDetails' when calling DocumentApi->ChangeAccessCode");
            }

            var localVarPath = "/v1/document/changeAccessCode";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var accessCodeDetails = new AccessCodeDetails(newAccessCode);
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DocumentId", documentId)); // query parameter
            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EmailId", emailId)); // query parameter

            if (signerOrder == null || signerOrder == 0)
            {
                signerOrder = 1;
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ZOrder", signerOrder)); // query parameter

            if (accessCodeDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accessCodeDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accessCodeDetails; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ChangeAccessCode", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     Delete the document when a particular document’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns></returns>
        public void DeleteDocument(string documentId)
        {
            this.DeleteDocumentWithHttpInfo(documentId);
        }

        /// <summary>
        ///    Delete the document when a particular document’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> DeleteDocumentWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->DeleteDocument");
            }

            var localVarPath = "/v1/document/delete";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteDocument", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     Delete the document when a particular document’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteDocumentAsync(string documentId)
        {
            await this.DeleteDocumentAsyncWithHttpInfo(documentId);
        }

        /// <summary>
        ///     Delete the document when a particular document’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> DeleteDocumentAsyncWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->DeleteDocument");
            }

            var localVarPath = "/v1/document/delete";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteDocument", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///    Download the audit trail document for a particular document with given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>System.IO.Stream</returns>
        public Stream DownloadAuditLog(string documentId)
        {
            var localVarResponse = this.DownloadAuditLogWithHttpInfo(documentId);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     Download the audit trail document for a particular document with given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<Stream> DownloadAuditLogWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->DownloadAuditLog");
            }

            var localVarPath = "/v1/document/downloadAuditLog";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DownloadAuditLog", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Stream>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stream)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        ///     Download the audit trail document for a particular document with given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async Task<Stream> DownloadAuditLogAsync(string documentId)
        {
            var localVarResponse = await this.DownloadAuditLogAsyncWithHttpInfo(documentId);

            return localVarResponse.Data;
        }

        /// <summary>
        ///    Download the audit trail document for a particular document with given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async Task<ApiResponse<Stream>> DownloadAuditLogAsyncWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->DownloadAuditLog");
            }

            var localVarPath = "/v1/document/downloadAuditLog";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DownloadAuditLog", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Stream>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stream)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        ///    Download the document for given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>System.IO.Stream</returns>
        public Stream DownloadDocument(string documentId)
        {
            var localVarResponse = this.DownloadDocumentWithHttpInfo(documentId);

            return localVarResponse.Data;
        }

        /// <summary>
        ///    Download the document for given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<Stream> DownloadDocumentWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->DownloadDocument");
            }

            var localVarPath = "/v1/document/download";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DownloadDocument", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Stream>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stream)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        ///     Download the document for given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async Task<Stream> DownloadDocumentAsync(string documentId)
        {
            var localVarResponse = await this.DownloadDocumentAsyncWithHttpInfo(documentId);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     Download the document for given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async Task<ApiResponse<Stream>> DownloadDocumentAsyncWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->DownloadDocument");
            }

            var localVarPath = "/v1/document/download";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DownloadDocument", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Stream>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stream)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        ///     Get sign link in a mail for Embedded Sign to given Email ID. The link has expiry time. This method can also be used to send a redirect URL.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Gets or sets Document Id.</param>
        /// <param name="signerEmail">Gets or sets signer email.</param>
        /// <param name="signLinkValidTill">Gets or sets sign link expiration date (Valid Till). (optional)</param>
        /// <param name="redirectUrl">Gets or sets Redirect URL. (optional)</param>
        /// <returns>EmbeddedSigningLink</returns>
        public EmbeddedSigningLink GetEmbeddedSignLink(string documentId, string signerEmail, DateTime? signLinkValidTill = default, string redirectUrl = default)
        {
            var localVarResponse = this.GetEmbeddedSignLinkWithHttpInfo(documentId, signerEmail, signLinkValidTill, redirectUrl);

            return localVarResponse.Data;
        }

        /// <summary>
        ///    Get sign link in a mail for Embedded Sign to given Email ID. The link has expiry time. This method can also be used to send a redirect URL.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Gets or sets Document Id.</param>
        /// <param name="signerEmail">Gets or sets signer email.</param>
        /// <param name="signLinkValidTill">Gets or sets sign link expiration date (Valid Till). (optional)</param>
        /// <param name="redirectUrl">Gets or sets Redirect URL. (optional)</param>
        /// <returns>ApiResponse of EmbeddedSigningLink</returns>
        public ApiResponse<EmbeddedSigningLink> GetEmbeddedSignLinkWithHttpInfo(string documentId, string signerEmail, DateTime? signLinkValidTill = default, string redirectUrl = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->GetEmbeddedSignLink");
            }

            // verify the required parameter 'signerEmail' is set
            if (signerEmail == null)
            {
                throw new ApiException(400, "Missing required parameter 'signerEmail' when calling DocumentApi->GetEmbeddedSignLink");
            }

            var localVarPath = "/v1/document/getEmbeddedSignLink";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DocumentId", documentId)); // query parameter
            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SignerEmail", signerEmail)); // query parameter

            if (signLinkValidTill != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SignLinkValidTill", signLinkValidTill)); // query parameter
            }

            if (redirectUrl != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "RedirectUrl", redirectUrl)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetEmbeddedSignLink", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedSigningLink>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbeddedSigningLink)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedSigningLink)));
        }

        /// <summary>
        ///    Get sign link in a mail for Embedded Sign to given Email ID. The link has expiry time. This method can also be used to send a redirect URL.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Gets or sets Document Id.</param>
        /// <param name="signerEmail">Gets or sets signer email.</param>
        /// <param name="signLinkValidTill">Gets or sets sign link expiration date (Valid Till). (optional)</param>
        /// <param name="redirectUrl">Gets or sets Redirect URL. (optional)</param>
        /// <returns>Task of EmbeddedSigningLink</returns>
        public async Task<EmbeddedSigningLink> GetEmbeddedSignLinkAsync(string documentId, string signerEmail, DateTime? signLinkValidTill = default, string redirectUrl = default)
        {
            var localVarResponse = await this.GetEmbeddedSignLinkAsyncWithHttpInfo(documentId, signerEmail, signLinkValidTill, redirectUrl);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sign link in a mail for Embedded Sign to given Email ID. The link has expiry time. This method can also be used to send a redirect URL.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Gets or sets Document Id.</param>
        /// <param name="signerEmail">Gets or sets signer email.</param>
        /// <param name="signLinkValidTill">Gets or sets sign link expiration date (Valid Till). (optional)</param>
        /// <param name="redirectUrl">Gets or sets Redirect URL. (optional)</param>
        /// <returns>Task of ApiResponse (EmbeddedSigningLink)</returns>
        public async Task<ApiResponse<EmbeddedSigningLink>> GetEmbeddedSignLinkAsyncWithHttpInfo(string documentId, string signerEmail, DateTime? signLinkValidTill = default, string redirectUrl = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->GetEmbeddedSignLink");
            }

            // verify the required parameter 'signerEmail' is set
            if (signerEmail == null)
            {
                throw new ApiException(400, "Missing required parameter 'signerEmail' when calling DocumentApi->GetEmbeddedSignLink");
            }

            var localVarPath = "/v1/document/getEmbeddedSignLink";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DocumentId", documentId)); // query parameter
            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SignerEmail", signerEmail)); // query parameter

            if (signLinkValidTill != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SignLinkValidTill", signLinkValidTill)); // query parameter
            }

            if (redirectUrl != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "RedirectUrl", redirectUrl)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetEmbeddedSignLink", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedSigningLink>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbeddedSigningLink)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedSigningLink)));
        }

        /// <summary>
        ///    Get summary of the document for the given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>DocumentProperties</returns>
        public DocumentProperties GetProperties(string documentId)
        {
            var localVarResponse = this.GetPropertiesWithHttpInfo(documentId);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get summary of the document for the given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>ApiResponse of DocumentProperties</returns>
        public ApiResponse<DocumentProperties> GetPropertiesWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->GetProperties");
            }

            var localVarPath = "/v1/document/properties";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetProperties", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<DocumentProperties>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentProperties)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentProperties)));
        }

        /// <summary>
        ///    Get summary of the document for the given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Task of DocumentProperties</returns>
        public async Task<DocumentProperties> GetPropertiesAsync(string documentId)
        {
            var localVarResponse = await this.GetPropertiesAsyncWithHttpInfo(documentId);

            return localVarResponse.Data;
        }

        /// <summary>
        ///    Get summary of the document for the given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <returns>Task of ApiResponse (DocumentProperties)</returns>
        public async Task<ApiResponse<DocumentProperties>> GetPropertiesAsyncWithHttpInfo(string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->GetProperties");
            }

            var localVarPath = "/v1/document/properties";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetProperties", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<DocumentProperties>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentProperties)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentProperties)));
        }

        /// <summary>
        ///     List all user documents which can be filtered by date, time, sender, status, and so on.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Gets or sets the page.</param>
        /// <param name="pageSize">Gets or sets the page size. (optional, default to 10)</param>
        /// <param name="sentBy">Gets or sets the documentId. (optional)</param>
        /// <param name="recipients">Gets or sets the recipients. (optional)</param>
        /// <param name="startDate">Gets or sets the start date. (optional)</param>
        /// <param name="status">Gets or sets the status. (optional)</param>
        /// <param name="endDate">Gets or sets the endDate. (optional)</param>
        /// <param name="searchKey">Gets or sets the searchKey. (optional)</param>
        /// <returns>DocumentRecords</returns>
        public DocumentRecords ListDocuments(int page, int? pageSize = default, List<string> sentBy = default, List<string> recipients = default, DateTime? startDate = default, List<Status> status = default, DateTime? endDate = default, string searchKey = default, List<string> labels = default)
        {
            var localVarResponse = this.ListDocumentsWithHttpInfo(page, pageSize, sentBy, recipients, startDate, status, endDate, searchKey, labels);

            return localVarResponse.Data;
        }

        /// <summary>
        ///    List all user documents which can be filtered by date, time, sender, status, and so on.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Gets or sets the page.</param>
        /// <param name="pageSize">Gets or sets the page size. (optional, default to 10)</param>
        /// <param name="sentBy">Gets or sets the documentId. (optional)</param>
        /// <param name="recipients">Gets or sets the recipients. (optional)</param>
        /// <param name="startDate">Gets or sets the start date. (optional)</param>
        /// <param name="status">Gets or sets the status. (optional)</param>
        /// <param name="endDate">Gets or sets the endDate. (optional)</param>
        /// <param name="searchKey">Gets or sets the searchKey. (optional)</param>
        /// <returns>ApiResponse of DocumentRecords</returns>
        public ApiResponse<DocumentRecords> ListDocumentsWithHttpInfo(int page, int? pageSize = default, List<string> sentBy = default, List<string> recipients = default, DateTime? startDate = default, List<Status> status = default, DateTime? endDate = default, string searchKey = default, List<string> labels = default)
        {
            // verify the required parameter 'page' is set

            var localVarPath = "/v1/document/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Page", page)); // query parameter

            if (pageSize != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            }

            if (sentBy != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "SentBy", sentBy)); // query parameter
            }

            if (recipients != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Recipients", recipients)); // query parameter
            }

            if (startDate != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            }

            if (status != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Status", status)); // query parameter
            }

            if (endDate != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            }

            if (searchKey != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchKey", searchKey)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (labels != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Labels", labels)); // query parameter
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ListDocuments", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<DocumentRecords>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentRecords)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentRecords)));
        }

        /// <summary>
        ///     List all user documents which can be filtered by date, time, sender, status, and so on.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Gets or sets the page.</param>
        /// <param name="pageSize">Gets or sets the page size. (optional, default to 10)</param>
        /// <param name="sentBy">Gets or sets the documentId. (optional)</param>
        /// <param name="recipients">Gets or sets the recipients. (optional)</param>
        /// <param name="startDate">Gets or sets the start date. (optional)</param>
        /// <param name="status">Gets or sets the status. (optional)</param>
        /// <param name="endDate">Gets or sets the endDate. (optional)</param>
        /// <param name="searchKey">Gets or sets the searchKey. (optional)</param>
        /// <returns>Task of DocumentRecords</returns>
        public async Task<DocumentRecords> ListDocumentsAsync(int page, int? pageSize = default, List<string> sentBy = default, List<string> recipients = default, DateTime? startDate = default, List<Status> status = default, DateTime? endDate = default, string searchKey = default, List<string> labels = default)
        {
            var localVarResponse = await this.ListDocumentsAsyncWithHttpInfo(page, pageSize, sentBy, recipients, startDate, status, endDate, searchKey, labels);

            return localVarResponse.Data;
        }

        /// <summary>
        ///    List all user documents which can be filtered by date, time, sender, status, and so on.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Gets or sets the page.</param>
        /// <param name="pageSize">Gets or sets the page size. (optional, default to 10)</param>
        /// <param name="sentBy">Gets or sets the documentId. (optional)</param>
        /// <param name="recipients">Gets or sets the recipients. (optional)</param>
        /// <param name="startDate">Gets or sets the start date. (optional)</param>
        /// <param name="status">Gets or sets the status. (optional)</param>
        /// <param name="endDate">Gets or sets the endDate. (optional)</param>
        /// <param name="searchKey">Gets or sets the searchKey. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentRecords)</returns>
        public async Task<ApiResponse<DocumentRecords>> ListDocumentsAsyncWithHttpInfo(int page, int? pageSize = default, List<string> sentBy = default, List<string> recipients = default, DateTime? startDate = default, List<Status> status = default, DateTime? endDate = default, string searchKey = default, List<string> labels = default)
        {
            // verify the required parameter 'page' is set

            var localVarPath = "/v1/document/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Page", page)); // query parameter

            if (pageSize != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            }

            if (sentBy != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "SentBy", sentBy)); // query parameter
            }

            if (recipients != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Recipients", recipients)); // query parameter
            }

            if (startDate != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            }

            if (status != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Status", status)); // query parameter
            }

            if (endDate != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            }

            if (searchKey != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchKey", searchKey)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (labels != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Labels", labels)); // query parameter
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ListDocuments", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<DocumentRecords>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentRecords)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentRecords)));
        }

        /// <summary>
        ///     Send a reminder message to pending signers for a particular document to their respective email IDs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <param name="receiverEmails">Signer emails.</param>
        /// <param name="reminderMessage">Reminder Message for signers. (optional)</param>
        /// <returns></returns>
        public void RemindDocument(string documentId, List<string> receiverEmails = default, ReminderMessage reminderMessage = default)
        {
            this.RemindDocumentWithHttpInfo(documentId, receiverEmails, reminderMessage);
        }

        /// <summary>
        ///    Send a reminder message to pending signers for a particular document to their respective email IDs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <param name="receiverEmails">Signer emails.</param>
        /// <param name="reminderMessage">Reminder Message for signers. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> RemindDocumentWithHttpInfo(string documentId, List<string> receiverEmails = default, ReminderMessage reminderMessage = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->RemindDocument");
            }

            var localVarPath = "/v1/document/remind";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            if (receiverEmails != null && receiverEmails.Any())
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "receiverEmails", receiverEmails)); // query parameter
            }

            if (reminderMessage != null && reminderMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reminderMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reminderMessage; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("RemindDocument", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     Send a reminder message to pending signers for a particular document to their respective email IDs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <param name="receiverEmails">Signer emails.</param>
        /// <param name="reminderMessage">Reminder Message for signers. (optional)</param>
        /// <returns>Task of void</returns>
        public async Task RemindDocumentAsync(string documentId, List<string> receiverEmails = default, ReminderMessage reminderMessage = default)
        {
            await this.RemindDocumentAsyncWithHttpInfo(documentId, receiverEmails, reminderMessage);
        }

        /// <summary>
        ///     Send a reminder message to pending signers for a particular document to their respective email IDs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <param name="receiverEmails">Signer emails.</param>
        /// <param name="reminderMessage">Reminder Message for signers. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> RemindDocumentAsyncWithHttpInfo(string documentId, List<string> receiverEmails = default, ReminderMessage reminderMessage = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->RemindDocument");
            }

            var localVarPath = "/v1/document/remind";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            if (receiverEmails != null && receiverEmails.Any())
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "receiverEmails", receiverEmails)); // query parameter
            }

            if (reminderMessage != null && reminderMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reminderMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reminderMessage; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("RemindDocument", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     Revoke the document with the given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <param name="revokeMessage">RevokeDetails.</param>
        /// <returns></returns>
        public void RevokeDocument(string documentId, string revokeMessage)
        {
            this.RevokeDocumentWithHttpInfo(documentId, revokeMessage);
        }

        /// <summary>
        ///     Revoke the document with the given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <param name="revokeMessage">RevokeDetails.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> RevokeDocumentWithHttpInfo(string documentId, string revokeMessage)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->RevokeDocument");
            }

            // verify the required parameter 'revokeDocument' is set
            if (revokeMessage == null)
            {
                throw new ApiException(400, "Missing required parameter 'revokeMessage' when calling DocumentApi->RevokeDocument");
            }

            var localVarPath = "/v1/document/revoke";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            var revokeDocument = new RevokeDocument(revokeMessage);
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            if (revokeDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(revokeDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = revokeDocument; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("RevokeDocument", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     Revoke the document with the given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <param name="revokeMessage">RevokeDetails.</param>
        /// <returns>Task of void</returns>
        public async Task RevokeDocumentAsync(string documentId, string revokeMessage)
        {
            await this.RevokeDocumentAsyncWithHttpInfo(documentId, revokeMessage);
        }

        /// <summary>
        ///     Revoke the document with the given document ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id.</param>
        /// <param name="revokeMessage">RevokeDetails.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> RevokeDocumentAsyncWithHttpInfo(string documentId, string revokeMessage)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentApi->RevokeDocument");
            }

            // verify the required parameter 'revokeDocument' is set
            if (revokeMessage == null)
            {
                throw new ApiException(400, "Missing required parameter 'revokeMessage' when calling DocumentApi->RevokeDocument");
            }

            var localVarPath = "/v1/document/revoke";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            var revokeDocument = new RevokeDocument(revokeMessage);
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentId", documentId)); // query parameter

            if (revokeDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(revokeDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = revokeDocument; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("RevokeDocument", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     Sends the document for sign.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>DocumentCreated</returns>
        public DocumentCreated SendDocument(SendForSign signRequestDetails)
        {
            var localVarResponse = this.SendDocumentWithHttpInfo(signRequestDetails);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     Sends the document for sign.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DocumentCreated</returns>
        public ApiResponse<DocumentCreated> SendDocumentWithHttpInfo(SendForSign signRequestDetails)
        {
            ValidateSendProperties(signRequestDetails);

            var localVarPath = "/v1/document/send";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (signRequestDetails.Files?.Count > 0)
            {
                localVarFileParams.Add("Files", signRequestDetails.Files);
            }

            localVarFormParams = FromRequestHelper.ConvertToFormRequest(signRequestDetails, localVarFormParams);

            if (signRequestDetails.FileUrls?.Count > 0)
            {
                localVarFileUrlParams = FromRequestHelper.ToFormParameter(localVarFileUrlParams, signRequestDetails.FileUrls, nameof(signRequestDetails.FileUrls));
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("SendDocument", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<DocumentCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentCreated)));
        }

        /// <inheritdoc/>
        public EmbeddedSendCreated CreateEmbeddedRequestUrl(EmbeddedDocumentRequest sendRequest)
        {
            var localVarResponse = this.CreateEmbeddedRequestUrlWithHttpInfo(sendRequest);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<EmbeddedSendCreated> CreateEmbeddedRequestUrlWithHttpInfo(EmbeddedDocumentRequest sendRequest)
        {
            if (sendRequest == null)
            {
                throw new ArgumentNullException(nameof(sendRequest));
            }

            ValidateSendProperties(sendRequest);

            var localVarPath = "/v1/document/createEmbeddedRequestUrl";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarFileParams.Add("Files", sendRequest.Files);
            localVarFormParams = FromRequestHelper.ConvertToFormRequest(sendRequest, localVarFormParams);

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType,
                localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateEmbeddedRequestUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedSendCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbeddedSendCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedSendCreated)));
        }

        /// <inheritdoc/>
        public async Task<EmbeddedSendCreated> CreateEmbeddedRequestUrlAsync(EmbeddedDocumentRequest sendRequest)
        {
            var localVarResponse = await this.CreateEmbeddedRequestUrlAsyncWithHttpInfo(sendRequest).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<EmbeddedSendCreated>> CreateEmbeddedRequestUrlAsyncWithHttpInfo(EmbeddedDocumentRequest sendRequest)
        {
            if (sendRequest == null)
            {
                throw new ArgumentNullException(nameof(sendRequest));
            }

            ValidateSendProperties(sendRequest);

            var localVarPath = "/v1/document/createEmbeddedRequestUrl";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarFileParams.Add("Files", sendRequest.Files);
            localVarFormParams = FromRequestHelper.ConvertToFormRequest(sendRequest, localVarFormParams);

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType,
                localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;
            var exception = this.ExceptionFactory?.Invoke("CreateEmbeddedRequestUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedSendCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbeddedSendCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedSendCreated)));
        }

        /// <summary>
        ///     Sends the document for sign.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DocumentCreated</returns>
        public async Task<DocumentCreated> SendDocumentAsync(SendForSign signRequestDetails)
        {
            var localVarResponse = await this.SendDocumentAsyncWithHttpInfo(signRequestDetails);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     Sends the document for sign.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DocumentCreated)</returns>
        public async Task<ApiResponse<DocumentCreated>> SendDocumentAsyncWithHttpInfo(SendForSign signRequestDetails)
        {
            ValidateSendProperties(signRequestDetails);

            var localVarPath = "/v1/document/send";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (signRequestDetails.Files?.Count > 0)
            {
                localVarFileParams.Add("Files", signRequestDetails.Files);
            }

            if (signRequestDetails.FileUrls?.Count > 0)
            {
                localVarFileUrlParams = FromRequestHelper.ToFormParameter(localVarFileUrlParams, signRequestDetails.FileUrls, nameof(signRequestDetails.FileUrls));
            }

            localVarFormParams = FromRequestHelper.ConvertToFormRequest(signRequestDetails, localVarFormParams);

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;
            var exception = this.ExceptionFactory?.Invoke("SendDocument", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<DocumentCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentCreated)));
        }

        private static void ValidateSendProperties(SendForSign sendRequest)
        {
            // verify the only files or fileUrls is set.
            if ((sendRequest.Files?.Count > 0 && sendRequest.FileUrls?.Count > 0) || (sendRequest.Files?.Count < 0 && sendRequest.FileUrls?.Count < 0))
            {
                throw new ApiException(400, ApiValidationMessages.FileOrFileUrl);
            }

            if (sendRequest.Files?.Count > 0)
            {
                if (sendRequest.Files.Sum(x => x.Filesize()) > MaxFileSize)
                {
                    throw new ApiException(413, ApiValidationMessages.FilesizesWithin100MB);
                }
            }

            if (sendRequest.FileUrls?.Count > 0)
            {
                foreach (var fileUrl in sendRequest.FileUrls)
                {
                    if (!Uri.IsWellFormedUriString(fileUrl.ToString(), UriKind.Absolute))
                    {
                        throw new ApiException(413, ApiValidationMessages.ValidUrl);
                    }
                }
            }

            // verify the required parameter 'title' is set
            if (string.IsNullOrEmpty(sendRequest.Title) && (sendRequest.DocumentInfo == null || !sendRequest.DocumentInfo.Any()))
            {
                throw new ApiException(422, ApiValidationMessages.TitleOrDocumentInfoIsRequired);
            }

            if (!string.IsNullOrEmpty(sendRequest.Title) && sendRequest.DocumentInfo != null && sendRequest.DocumentInfo.Any())
            {
                throw new ApiException(422, ApiValidationMessages.SameProperty);
            }

            // verify the required parameter 'signers' is set
            if (sendRequest.Signers == null)
            {
                throw new ApiException(400, ApiValidationMessages.SignersIsSet);
            }

            // verify the title length
            if (sendRequest.Title != null && sendRequest.Title.Length > 256)
            {
                throw new ApiException(422, ApiValidationMessages.TitleLengthExceeds);
            }

            // verify the message length
            if (sendRequest.Message != null && sendRequest.Message.Length > 5000)
            {
                throw new ApiException(422, ApiValidationMessages.MessageLengthExceeds);
            }

            if (!string.IsNullOrEmpty(sendRequest.BrandId) && !Guid.TryParse(sendRequest.BrandId, out _))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidBrandId);
            }

            if (sendRequest.TextTagDefinitions != null && sendRequest.TextTagDefinitions.Any(x => (x.Size != null && (x.Size.Width <= 0 || x.Size.Height <= 0))))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidTextTagSize);
            }
        }

        private static bool ValidateUri(string uri)
        {
            return uri == null
                || (Uri.TryCreate(uri, UriKind.Absolute, out var result)
                    && (result.Scheme == Uri.UriSchemeHttp || result.Scheme == Uri.UriSchemeHttps));
        }

    }
}
