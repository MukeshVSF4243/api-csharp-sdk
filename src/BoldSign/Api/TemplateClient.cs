/*
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System.Globalization;

namespace BoldSign.Api
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.IO;
    using System.Linq;
    using System.Threading.Tasks;
    using BoldSign.Api.Model;
    using BoldSign.Api.Resources;
    using BoldSign.Model;
    using RestSharp;

    /// <summary>
    ///    Represents a collection of functions to interact with the API endpoints. The functions perform actions such as sending document sign request from template, deleting a template, listing the templates and so on.
    /// </summary>
    public class TemplateClient : ITemplateClient
    {
        private const long MaxFileSize = 104857600;
        private ExceptionFactory exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="TemplateClient" /> class.
        /// </summary>
        /// <returns></returns>
        public TemplateClient(string basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TemplateClient" /> class.
        /// </summary>
        /// <returns></returns>
        public TemplateClient()
        {
            this.Configuration = Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TemplateClient" /> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateClient(Configuration configuration = null)
        {
            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TemplateApi" /> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="apiClient">An instance of ApiClient</param>
        /// <returns></returns>
        public TemplateClient(ApiClient apiClient)
        {
            this.Configuration = (Configuration)apiClient.Configuration;
            this.Configuration.ApiClient = apiClient;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath() => this.Configuration.ApiClient.RestClient.BaseUrl.ToString();

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this.exceptionFactory != null && this.exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return this.exceptionFactory;
            }
            set => this.exceptionFactory = value;
        }

        /// <summary>
        ///     Deletes a template with the given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id.</param>
        /// <returns></returns>
        public void DeleteTemplate(string templateId)
        {
            this.DeleteTemplateWithHttpInfo(templateId);
        }

        /// <summary>
        ///    Deletes a template with the given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> DeleteTemplateWithHttpInfo(string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->DeleteTemplate");
            }

            var localVarPath = "/v1/template/delete";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteTemplate", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///    Deletes a template with the given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteTemplateAsync(string templateId)
        {
            await this.DeleteTemplateAsyncWithHttpInfo(templateId);
        }

        /// <summary>
        ///    Deletes a template with the given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The template id.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> DeleteTemplateAsyncWithHttpInfo(string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->DeleteTemplate");
            }

            var localVarPath = "/v1/template/delete";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteTemplate", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     List all the templates created.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Gets or sets the page.</param>
        /// <param name="pageSize">Gets or sets the page size. (optional, default to 10)</param>
        /// <param name="templateType">Gets or sets the templateType. (optional, default to all).</param>
        /// <returns>TemplateRecords</returns>
        public TemplateRecords ListTemplates(int page, int? pageSize = default, string searchKey = default, TemplateType? templateType = default)
        {
            var localVarResponse = this.ListTemplatesWithHttpInfo(page, pageSize, searchKey, templateType);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     List all the templates created.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Gets or sets the page.</param>
        /// <param name="pageSize">Gets or sets the page size. (optional, default to 10)</param>
        /// <param name="templateType">Gets or sets the templateType. (optional, default to all).</param>
        /// <returns>ApiResponse of TemplateRecords</returns>
        public ApiResponse<TemplateRecords> ListTemplatesWithHttpInfo(int page, int? pageSize = default, string searchKey = default, TemplateType? templateType = default)
        {
            // verify the required parameter 'page' is set
            if (page < 1)
            {
                throw new ApiException(400, "Missing required parameter 'page' when calling TemplateApi->ListTemplates");
            }

            var localVarPath = "/v1/template/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (pageSize != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Page", page)); // query parameter

            if (searchKey != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchKey", searchKey)); // query parameter
            }

            if (templateType != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "TemplateType", templateType)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ListTemplates", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<TemplateRecords>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateRecords)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateRecords)));
        }

        /// <summary>
        ///     List all the templates created.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Gets or sets the page.</param>
        /// <param name="pageSize">Gets or sets the page size. (optional, default to 10)</param>
        /// <param name="templateType">Gets or sets the templateType. (optional, default to all).</param>
        /// <returns>Task of TemplateRecords</returns>
        public async Task<TemplateRecords> ListTemplatesAsync(int page, int? pageSize = default, string searchKey = default, TemplateType? templateType = default)
        {
            var localVarResponse = await this.ListTemplatesAsyncWithHttpInfo(page, pageSize, searchKey, templateType);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     List all the templates created.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Gets or sets the page.</param>
        /// <param name="pageSize">Gets or sets the page size. (optional, default to 10)</param>
        /// <param name="templateType">Gets or sets the templateType. (optional, default to all).</param>
        /// <returns>Task of ApiResponse (TemplateRecords)</returns>
        public async Task<ApiResponse<TemplateRecords>> ListTemplatesAsyncWithHttpInfo(int page, int? pageSize = default, string searchKey = default, TemplateType? templateType = default)
        {
            // verify the required parameter 'page' is set
            if (page < 1)
            {
                throw new ApiException(400, "Missing required parameter 'page' when calling TemplateApi->ListTemplates");
            }

            var localVarPath = "/v1/template/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (pageSize != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Page", page)); // query parameter

            if (searchKey != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchKey", searchKey)); // query parameter
            }

            if (templateType != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "TemplateType", templateType)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ListTemplates", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<TemplateRecords>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateRecords)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateRecords)));
        }

        /// <summary>
        ///     Send a document for signature using a Template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendForSignFromTemplate">It contains page,page size and status details. (optional)</param>
        /// <returns>DocumentCreated</returns>
        public DocumentCreated SendUsingTemplate(SendForSignFromTemplate sendForSignFromTemplate = default)
        {
            var localVarResponse = this.SendUsingTemplateWithHttpInfo(sendForSignFromTemplate);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send a document for signature using a Template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendForSignFromTemplate">It contains page,page size and status details. (optional)</param>
        /// <returns>ApiResponse of DocumentCreated</returns>
        public ApiResponse<DocumentCreated> SendUsingTemplateWithHttpInfo(SendForSignFromTemplate sendForSignFromTemplate = default)
        {
            // verify the title length
            if (sendForSignFromTemplate.Title != null && sendForSignFromTemplate.Title.Length > 256)
            {
                throw new ApiException(422, ApiValidationMessages.TitleLengthExceeds);
            }

            // verify the message length
            if (sendForSignFromTemplate.Message != null && sendForSignFromTemplate.Message.Length > 5000)
            {
                throw new ApiException(422, ApiValidationMessages.MessageLengthExceeds);
            }

            ValidateExpiryDateTypeValues(sendForSignFromTemplate);

            var localVarPath = "/v1/template/send";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (string.IsNullOrEmpty(sendForSignFromTemplate.TemplateId))
            {
                throw new ArgumentException($"Parameter {nameof(sendForSignFromTemplate.TemplateId)} should be null or empty");
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TemplateId", sendForSignFromTemplate.TemplateId)); // query parameter

            if (sendForSignFromTemplate != null && sendForSignFromTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendForSignFromTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendForSignFromTemplate; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("SendUsingTemplate", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<DocumentCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentCreated)));
        }

        /// <summary>
        ///     Send a document for signature using a Template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendForSignFromTemplate">It contains page,page size and status details. (optional)</param>
        /// <returns>Task of DocumentCreated</returns>
        public async Task<DocumentCreated> SendUsingTemplateAsync(SendForSignFromTemplate sendForSignFromTemplate = default)
        {
            var localVarResponse = await this.SendUsingTemplateAsyncWithHttpInfo(sendForSignFromTemplate);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send a document for signature using a Template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendForSignFromTemplate">It contains page,page size and status details. (optional)</param>
        /// <returns>Task of ApiResponse (DocumentCreated)</returns>
        public async Task<ApiResponse<DocumentCreated>> SendUsingTemplateAsyncWithHttpInfo(SendForSignFromTemplate sendForSignFromTemplate = default)
        {

            // verify the title length
            if (sendForSignFromTemplate.Title != null && sendForSignFromTemplate.Title.Length > 256)
            {
                throw new ApiException(422, ApiValidationMessages.TitleLengthExceeds);
            }

            // verify the message length
            if (sendForSignFromTemplate.Message != null && sendForSignFromTemplate.Message.Length > 5000)
            {
                throw new ApiException(422, ApiValidationMessages.MessageLengthExceeds);
            }

            ValidateExpiryDateTypeValues(sendForSignFromTemplate);

            var localVarPath = "/v1/template/send";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (string.IsNullOrEmpty(sendForSignFromTemplate.TemplateId))
            {
                throw new ArgumentException($"Parameter {nameof(sendForSignFromTemplate.TemplateId)} should be null or empty");
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TemplateId", sendForSignFromTemplate.TemplateId)); // query parameter

            if (sendForSignFromTemplate != null && sendForSignFromTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendForSignFromTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendForSignFromTemplate; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("SendUsingTemplate", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<DocumentCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentCreated)));
        }

        /// <inheritdoc/>
        public EmbeddedSendCreated CreateEmbeddedRequestUrl(EmbeddedTemplateRequest send = default)
        {
            var localVarResponse = this.CreateEmbeddedRequestUrlWithHttpInfo(send);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<EmbeddedSendCreated> CreateEmbeddedRequestUrlWithHttpInfo(EmbeddedTemplateRequest send = default)
        {
            if (send == null)
            {
                throw new ArgumentNullException(nameof(send));
            }

            ValidateTemplateProperties(send);

            var localVarPath = "/v1/template/createEmbeddedRequestUrl";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "TemplateId", send.TemplateId)); // query parameter

            if (send.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(send); // http body (model) parameter
            }
            else
            {
                localVarPostBody = send; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                    localVarPath,
                    Method.POST,
                    localVarQueryParams,
                    localVarPostBody,
                    localVarHeaderParams,
                    localVarFormParams,
                    localVarFileParams,
                    localVarPathParams,
                    localVarHttpContentType,
                    localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateEmbeddedRequestUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedSendCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbeddedSendCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedSendCreated)));
        }

        /// <inheritdoc/>
        public async Task<EmbeddedSendCreated> CreateEmbeddedRequestUrlAsync(EmbeddedTemplateRequest send = default)
        {
            var localVarResponse = await this.CreateEmbeddedRequestUrlAsyncWithHttpInfo(send).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<EmbeddedSendCreated>> CreateEmbeddedRequestUrlAsyncWithHttpInfo(EmbeddedTemplateRequest send = default)
        {
            if (send == null)
            {
                throw new ArgumentNullException(nameof(send));
            }

            ValidateTemplateProperties(send);

            var localVarPath = "/v1/template/createEmbeddedRequestUrl";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "application/xml",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "TemplateId", send.TemplateId)); // query parameter

            if (send.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(send); // http body (model) parameter
            }
            else
            {
                localVarPostBody = send; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                    localVarPath,
                    Method.POST,
                    localVarQueryParams,
                    localVarPostBody,
                    localVarHeaderParams,
                    localVarFormParams,
                    localVarFileParams,
                    localVarPathParams,
                    localVarHttpContentType,
                    localVarFileUrlParams)
                .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateEmbeddedRequestUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedSendCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbeddedSendCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedSendCreated)));
        }

        /// <inheritdoc/>
        public TemplateCreated CreateTemplate(CreateTemplateRequest createTemplate)
        {
            var localVarResponse = this.CreateTemplateWithHttpInfo(createTemplate);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<TemplateCreated> CreateTemplateWithHttpInfo(CreateTemplateRequest createTemplate)
        {
            if (createTemplate == null)
            {
                throw new ArgumentNullException(nameof(createTemplate));
            }

            ValidateCreateTemplateProperties(createTemplate);

            const string localVarPath = "/v1/template/create";
            var localVarPathParams = this.PrepareCreateTemplate(
                createTemplate,
                out var localVarQueryParams,
                out var localVarHeaderParams,
                out var localVarFormParams,
                out var localVarFileParams,
                out var localVarFileUrlParams,
                out var localVarPostBody,
                out var localVarHttpContentType);

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath, Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateTemplate", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<TemplateCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateCreated)));
        }

        /// <inheritdoc/>
        public async Task<TemplateCreated> CreateTemplateAsync(CreateTemplateRequest createTemplate)
        {
            var localVarResponse = await this.CreateTemplateWithHttpInfoAsync(createTemplate).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<TemplateCreated>> CreateTemplateWithHttpInfoAsync(CreateTemplateRequest createTemplate)
        {
            if (createTemplate == null)
            {
                throw new ArgumentNullException(nameof(createTemplate));
            }

            ValidateCreateTemplateProperties(createTemplate);

            const string localVarPath = "/v1/template/create";

            var localVarPathParams = this.PrepareCreateTemplate(
                createTemplate,
                out var localVarQueryParams,
                out var localVarHeaderParams,
                out var localVarFormParams,
                out var localVarFileParams,
                out var localVarFileUrlParams,
                out var localVarPostBody,
                out var localVarHttpContentType);

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath, Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateTemplate", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<TemplateCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateCreated)));
        }

        /// <inheritdoc/>
        public EmbeddedTemplateCreated CreateEmbeddedTemplateUrl(CreateEmbeddedTemplateRequest createTemplate)
        {
            var localVarResponse = this.CreateEmbeddedTemplateUrlWithHttpInfo(createTemplate);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<EmbeddedTemplateCreated> CreateEmbeddedTemplateUrlWithHttpInfo(CreateEmbeddedTemplateRequest createTemplate)
        {
            if (createTemplate == null)
            {
                throw new ArgumentNullException(nameof(createTemplate));
            }

            ValidateCreateTemplateProperties(createTemplate);

            const string localVarPath = "/v1/template/createEmbeddedTemplateUrl";

            var localVarPathParams = this.PrepareCreateTemplate(
                createTemplate,
                out var localVarQueryParams,
                out var localVarHeaderParams,
                out var localVarFormParams,
                out var localVarFileParams,
                out var localVarFileUrlParams,
                out var localVarPostBody,
                out var localVarHttpContentType);

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType,
                localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("createEmbeddedTemplateUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedTemplateCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbeddedTemplateCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedTemplateCreated)));
        }

        /// <inheritdoc/>
        public async Task<EmbeddedTemplateCreated> CreateEmbeddedTemplateUrlAsync(CreateEmbeddedTemplateRequest createRequest)
        {
            var localVarResponse = await this.CreateEmbeddedTemplateUrlWithHttpInfoAsync(createRequest).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<EmbeddedTemplateCreated>> CreateEmbeddedTemplateUrlWithHttpInfoAsync(CreateEmbeddedTemplateRequest createRequest)
        {
            if (createRequest == null)
            {
                throw new ArgumentNullException(nameof(createRequest));
            }

            ValidateCreateTemplateProperties(createRequest);

            const string localVarPath = "/v1/template/createEmbeddedTemplateUrl";

            var localVarPathParams = this.PrepareCreateTemplate(
                createRequest,
                out var localVarQueryParams,
                out var localVarHeaderParams,
                out var localVarFormParams,
                out var localVarFileParams,
                out var localVarFileUrlParams,
                out var localVarPostBody,
                out var localVarHttpContentType);

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                    localVarPath,
                    Method.POST,
                    localVarQueryParams,
                    localVarPostBody,
                    localVarHeaderParams,
                    localVarFormParams,
                    localVarFileParams,
                    localVarPathParams,
                    localVarHttpContentType,
                    localVarFileUrlParams)
                .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("createEmbeddedTemplateUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedTemplateCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbeddedTemplateCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedTemplateCreated)));
        }

        /// <summary>
        ///    Download the template for given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="templateId">Template Id.</param>
        /// <returns>System.IO.Stream.</returns>
        public Stream DownloadTemplate(string templateId)
        {
            var localVarResponse = this.DownloadTemplateWithHttpInfo(templateId);

            return localVarResponse.Data;
        }

        /// <summary>
        ///    Download the template for given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="templateId">Template Id.</param>
        /// <returns>ApiResponse of System.IO.Stream.</returns>
        public ApiResponse<Stream> DownloadTemplateWithHttpInfo(string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new ApiException(400, ApiValidationMessages.TemplateIdDownload);
            }

            var localVarPath = "/v1/template/download";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "templateId", templateId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath, Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DownloadTemplate", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Stream>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stream)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        ///     Download the template for given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="templateId">Template Id.</param>
        /// <returns>Task of System.IO.Stream.</returns>
        public async Task<Stream> DownloadTemplateAsync(string templateId)
        {
            var localVarResponse = await this.DownloadTemplateAsyncWithHttpInfo(templateId).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     Download the template for given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="templateId">Template Id.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream).</returns>
        public async Task<ApiResponse<Stream>> DownloadTemplateAsyncWithHttpInfo(string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new ApiException(400, ApiValidationMessages.TemplateIdDownload);
            }

            var localVarPath = "/v1/template/download";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "templateId", templateId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath, Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DownloadTemplate", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Stream>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stream)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <summary>
        /// Get summary of the template for the given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="templateId">Template Id.</param>
        /// <returns>TemplateProperties.</returns>
        public TemplateProperties GetProperties(string templateId)
        {
            var localVarResponse = this.GetPropertiesWithHttpInfo(templateId);

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get summary of the template for the given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="templateId">Template Id.</param>
        /// <returns>ApiResponse of TemplateProperties.</returns>
        public ApiResponse<TemplateProperties> GetPropertiesWithHttpInfo(string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new ApiException(400, ApiValidationMessages.TemplateIdIsSet);
            }

            var localVarPath = "/v1/template/properties";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "templateId", templateId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath, Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetProperties", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<TemplateProperties>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateProperties)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateProperties)));
        }

        /// <summary>
        ///    Get summary of the template for the given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="templateId">Template Id.</param>
        /// <returns>Task of TemplateProperties.</returns>
        public async Task<TemplateProperties> GetPropertiesAsync(string templateId)
        {
            var localVarResponse = await this.GetPropertiesAsyncWithHttpInfo(templateId).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get summary of the template for the given template ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="templateId">Template Id.</param>
        /// <returns>Task of ApiResponse (TemplateProperties).</returns>
        public async Task<ApiResponse<TemplateProperties>> GetPropertiesAsyncWithHttpInfo(string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new ApiException(400, ApiValidationMessages.TemplateIdIsSet);
            }

            var localVarPath = "/v1/template/properties";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "templateId", templateId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath, Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetProperties", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<TemplateProperties>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateProperties)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateProperties)));
        }

        /// <inheritdoc/>
        public EmbeddedTemplateEdited GetEmbeddedTemplateEditUrl(EmbeddedTemplateEditRequest embedTemplateEdit)
        {
            var localVarResponse = this.GetEmbeddedTemplateEditUrlWithHttpInfo(embedTemplateEdit);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<EmbeddedTemplateEdited> GetEmbeddedTemplateEditUrlWithHttpInfo(EmbeddedTemplateEditRequest embedTemplateEdit)
        {
            if (embedTemplateEdit == null)
            {
                throw new ArgumentNullException(nameof(embedTemplateEdit));
            }

            // verify the required parameter 'templateId' is set
            if (string.IsNullOrEmpty(embedTemplateEdit.TemplateId))
            {
                throw new ApiException(422, ApiValidationMessages.EmbeddedTemplateIdNull);
            }

            const string localVarPath = "/v1/template/getEmbeddedTemplateEditUrl";
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            var localVarPathParams = this.PrepareEmbeddedTemplateEdit(
                embedTemplateEdit,
                out var localVarQueryParams,
                out var localVarHeaderParams,
                out var localVarFormParams,
                out var localVarHttpContentType);

            // make the HTTP request
            var localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                null,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType,
                localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("getEmbeddedTemplateEditUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedTemplateEdited>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbeddedTemplateEdited)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedTemplateEdited)));
        }

        /// <inheritdoc/>
        public async Task<EmbeddedTemplateEdited> GetEmbeddedTemplateEditUrlAsync(EmbeddedTemplateEditRequest embeddedTemplateEditRequest)
        {
            var localVarResponse = await this.GetEmbeddedTemplateEditUrlWithHttpInfoAsync(embeddedTemplateEditRequest).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<EmbeddedTemplateEdited>> GetEmbeddedTemplateEditUrlWithHttpInfoAsync(EmbeddedTemplateEditRequest embeddedTemplateEditRequest)
        {
            if (embeddedTemplateEditRequest == null)
            {
                throw new ArgumentNullException(nameof(embeddedTemplateEditRequest));
            }

            // verify the required parameter 'templateId' is set
            if (string.IsNullOrEmpty(embeddedTemplateEditRequest.TemplateId))
            {
                throw new ApiException(422, ApiValidationMessages.EmbeddedTemplateIdNull);
            }

            const string localVarPath = "/v1/template/getEmbeddedTemplateEditUrl";
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            var localVarPathParams = this.PrepareEmbeddedTemplateEdit(
                embeddedTemplateEditRequest,
                out var localVarQueryParams,
                out var localVarHeaderParams,
                out var localVarFormParams,
                out var localVarHttpContentType);

            // make the HTTP request
            var localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                null,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType,
                localVarFileUrlParams)
                .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("getEmbeddedTemplateEditUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedTemplateEdited>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmbeddedTemplateEdited)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedTemplateEdited)));
        }

        private Dictionary<string, string> PrepareEmbeddedTemplateEdit(
            EmbeddedTemplateEditRequest embeddedEditTemplate,
            out List<KeyValuePair<string, string>> localVarQueryParams,
            out Dictionary<string, string> localVarHeaderParams,
            out Dictionary<string, string> localVarFormParams,
            out string localVarHttpContentType)
        {
            var localVarPathParams = new Dictionary<string, string>();
            localVarQueryParams = new List<KeyValuePair<string, string>>();
            localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            localVarFormParams = new Dictionary<string, string>();

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (embeddedEditTemplate is EmbeddedTemplateEditRequest embeddedRequest)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "TemplateId", embeddedRequest.TemplateId)); // query parameter
                if (embeddedRequest.RedirectUrl != null)
                {
                    localVarFormParams.Add(nameof(embeddedRequest.RedirectUrl), embeddedRequest.RedirectUrl.ToString());
                }

                localVarFormParams.Add(nameof(embeddedRequest.ShowToolbar), embeddedRequest.ShowToolbar ? "true" : "false");
                localVarFormParams.Add(nameof(embeddedRequest.ShowSaveButton), embeddedRequest.ShowSaveButton ? "true" : "false");
                localVarFormParams.Add(nameof(embeddedRequest.ShowCreateButton), embeddedRequest.ShowCreateButton ? "true" : "false");
                localVarFormParams.Add(nameof(embeddedRequest.ShowPreviewButton), embeddedRequest.ShowPreviewButton ? "true" : "false");
                localVarFormParams.Add(nameof(embeddedRequest.ShowNavigationButtons), embeddedRequest.ShowNavigationButtons ? "true" : "false");
                localVarFormParams.Add(nameof(embeddedRequest.ViewOption), embeddedRequest.ViewOption.ToString());
                localVarFormParams.Add(nameof(embeddedRequest.Locale), embeddedRequest.Locale.ToString());
                localVarFormParams.Add(nameof(embeddedRequest.ShowTooltip), embeddedRequest.ShowTooltip ? "true" : "false");

                if (embeddedRequest.LinkValidTill.HasValue)
                {
                    localVarFormParams.Add(nameof(embeddedRequest.LinkValidTill), embeddedRequest.LinkValidTill.ToString());
                }
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            return localVarPathParams;
        }

        private Dictionary<string, string> PrepareCreateTemplate(
           CreateTemplateRequest createTemplate,
           out List<KeyValuePair<string, string>> localVarQueryParams,
           out Dictionary<string, string> localVarHeaderParams,
           out Dictionary<string, string> localVarFormParams,
           out Dictionary<string, List<IDocumentFile>> localVarFileParams,
           out Dictionary<string, Uri> localVarFileUrlParams,
           out object localVarPostBody,
           out string localVarHttpContentType)
        {
            var localVarPathParams = new Dictionary<string, string>();
            localVarQueryParams = new List<KeyValuePair<string, string>>();
            localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            localVarFormParams = new Dictionary<string, string>();
            localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            localVarFileUrlParams = new Dictionary<string, Uri>();
            localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createTemplate.Files?.Count > 0)
            {
                localVarFileParams.Add("Files", createTemplate.Files);
            }

            if (createTemplate.FileUrls?.Count > 0)
            {
                localVarFileUrlParams = FromRequestHelper.ToFormParameter(localVarFileUrlParams, createTemplate.FileUrls, nameof(createTemplate.FileUrls));
            }

            localVarFormParams = FromRequestHelper.ConvertToFormRequestForTemplate(createTemplate, localVarFormParams);

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            return localVarPathParams;
        }
          private static void ValidateCreateTemplateProperties(CreateTemplateRequest templateDetails)
        {
            DocumentHelper.ValidateFiles(templateDetails);

            if (templateDetails.Files?.Count > 0)
            {
                if (templateDetails.Files.Sum(x => x.Filesize()) > MaxFileSize)
                {
                    throw new ApiException(413, ApiValidationMessages.FilesizesWithin100MB);
                }
            }

            if (templateDetails.FileUrls?.Count > 0
                && templateDetails.FileUrls.Any(fileUrl => !Uri.IsWellFormedUriString(fileUrl.ToString(), UriKind.Absolute)))
            {
                throw new ApiException(413, ApiValidationMessages.ValidUrl);
            }

            if (string.IsNullOrEmpty(templateDetails.DocumentTitle)
                && (templateDetails.DocumentInfo == null || !templateDetails.DocumentInfo.Any()))
            {
                throw new ApiException(422, ApiValidationMessages.TitleOrDocumentInfoIsRequired);
            }

            if (!string.IsNullOrEmpty(templateDetails.DocumentTitle)
                && templateDetails.DocumentInfo != null
                && templateDetails.DocumentInfo.Any())
            {
                throw new ApiException(422, ApiValidationMessages.TitleAndDocumentInfo);
            }

            if (string.IsNullOrEmpty(templateDetails.Title))
            {
                throw new ApiException(422, ApiValidationMessages.TemplateTitleRequired);
            }

            // verify the title length
            if (!string.IsNullOrEmpty(templateDetails.Title) && templateDetails.Title.Length > 256)
            {
                throw new ApiException(422, ApiValidationMessages.TitleLengthExceeds);
            }

            if (!string.IsNullOrEmpty(templateDetails.BrandId) && !Guid.TryParse(templateDetails.BrandId, out _))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidBrandId);
            }

            // verify the required parameter 'roles' is set
            if (templateDetails.Roles == null
                && !(templateDetails is CreateEmbeddedTemplateRequest { ViewOption: PageViewOption.FillingPage }))
            {
                throw new ApiException(400, ApiValidationMessages.RolesRequired);
            }

            var roles = templateDetails.Roles?.ToList();

            ValidateCreateTemplateRoles(templateDetails, roles);
        }

        private static void ValidateCreateTemplateRoles(CreateTemplateRequest templateDetails, List<TemplateRole> roles)
        {
            if (roles == null)
            {
                return;
            }

            if (!(templateDetails is CreateEmbeddedTemplateRequest) && templateDetails.UseTextTags == false)
            {
                var isEmptyFormField = roles?.Any(x => (x.SignerType != SignerType.Reviewer && x.FormFields == null));

                if (isEmptyFormField == true)
                {
                    throw new ApiException(400, ApiValidationMessages.FormFieldsRequired);
                }
            }

            var isReviewerFormField = roles?.Any(x => x.SignerType == SignerType.Reviewer && x.FormFields != null);

            if (isReviewerFormField == true)
            {
                throw new ApiException(422, ApiValidationMessages.ReviewerFields);
            }

            var isGroupNameNull = roles
             .Where(x => x.SignerType != SignerType.Reviewer)
             .Where(x => x.FormFields != null)
             .SelectMany(x => x.FormFields)
             .Any(x => x is RadioButtonField radioButtonField && string.IsNullOrEmpty(radioButtonField.GroupName));

            if (isGroupNameNull)
            {
                throw new ApiException(400, ApiValidationMessages.GroupNameRequired);
            }

            if (templateDetails.EnableSigningOrder && roles.Any(x => x.SignerOrder < 1 || x.SignerOrder > 50))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidSignerOrder);
            }

            if (roles.GroupBy(x => x.Index).Any(x => x.Count() > 1))
            {
                throw new ApiException(422, ApiValidationMessages.DuplicateRoleIndex);
            }

            if (templateDetails.DocumentInfo != null)
            {
                var documentInfo = templateDetails.DocumentInfo.ToList();

                if (documentInfo.Count > 0 && roles.Count > 0)
                {
                    foreach (var signer in roles)
                    {
                        if (documentInfo.Any(x => x.Language == signer.Language))
                        {
                            continue;
                        }

                        var errMsg = string.Format(
                             CultureInfo.InvariantCulture,
                             ApiValidationMessages.DocumentInfoMissing,
                             signer.Language.ToString());
                        throw new ApiException(422, errMsg);
                    }
                }

                var anyDuplicate = templateDetails.DocumentInfo.GroupBy(x => x.Language).Any(g => g.Count() > 1);

                if (anyDuplicate)
                {
                    throw new ApiException(422, ApiValidationMessages.ExtraLanguageValues);
                }

                if (templateDetails.DocumentInfo.Any(x => string.IsNullOrEmpty(x.Title)))
                {
                    throw new ApiException(422, ApiValidationMessages.DocumentTitleRequired);
                }

                foreach (var documentInfos in templateDetails.DocumentInfo)
                {
                    if (roles.Any(y => y.Language == documentInfos.Language))
                    {
                        continue;
                    }

                    var errMsg = string.Format(
                        CultureInfo.InvariantCulture,
                        ApiValidationMessages.InvalidLanguage,
                        documentInfos.Language.ToString());

                    throw new ApiException(422, errMsg);
                }
            }

            if (roles != null
                && templateDetails.DocumentInfo == null
                && !string.IsNullOrEmpty(templateDetails.DocumentTitle)
                && roles.Any(x => x.Language != Languages.English))
            {
                var errMsg = string.Format(
                    CultureInfo.InvariantCulture,
                    ApiValidationMessages.DocumentInfoMissing,
                    roles.First(x => x.Language != Languages.English).Language.ToString());

                throw new ApiException(422, errMsg);
            }
        }

        private static void ValidateTemplateProperties(SendForSignFromTemplate send)
        {
            if (string.IsNullOrEmpty(send.TemplateId))
            {
                throw new ArgumentException(ApiValidationMessages.TemplateIdNull);
            }

            // verify the title length
            if (send.Title != null && send.Title.Length > 256)
            {
                throw new ApiException(422, ApiValidationMessages.TitleLengthExceeds);
            }

            // verify the message length
            if (send.Message != null && send.Message.Length > 5000)
            {
                throw new ApiException(422, ApiValidationMessages.MessageLengthExceeds);
            }

            ValidateExpiryDateTypeValues(send);
        }

        private static void ValidateExpiryDateTypeValues(SendForSignFromTemplate send)
        {
            if (send.ExpiryDateType == ExpiryDateType.Days)
            {
                if (send.ExpiryValue < 1 || send.ExpiryValue > 180)
                {
                    throw new ApiException(422, ApiValidationMessages.ExpiryDaysValOutOfRange);
                }
            }
            else if (send.ExpiryDateType == ExpiryDateType.Hours)
            {
                if (send.ExpiryValue < 8 || send.ExpiryValue > 4320)
                {
                    throw new ApiException(422, ApiValidationMessages.ExpiryHoursValOutOfRange);
                }
            }
            else if (send.ExpiryDateType == ExpiryDateType.SpecificDateTime)
            {
                DateTime startDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
                DateTime expiryDate = startDate.AddSeconds(send.ExpiryValue);
                var totaldays = (expiryDate - DateTime.UtcNow).TotalDays;
                if (totaldays < 1 || totaldays > 180)
                {
                    throw new ApiException(422, ApiValidationMessages.ExpirySpecifcDateOutOfRange);
                }
            }
        }
    }
}
