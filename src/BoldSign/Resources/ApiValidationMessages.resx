<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttachmentInformationRequired" xml:space="preserve">
    <value>The Attachment Information is required.</value>
  </data>
  <data name="AttachmentTitleRequired" xml:space="preserve">
    <value>Please provide the Attachment Title.</value>
  </data>
  <data name="BoundsRequired" xml:space="preserve">
    <value>bounds is a required property for FormField and cannot be null</value>
  </data>
  <data name="FieldTypeRequired" xml:space="preserve">
    <value>fieldType is a required property for FormField and cannot be null</value>
  </data>
  <data name="FileOrFileUrl" xml:space="preserve">
    <value>Please use either Files parameter or FileUrls parameter, but not both</value>
  </data>
  <data name="FilesizesWithin100MB" xml:space="preserve">
    <value>Document's size exceeds the limit of 100 MB. Please replace it. (all files combined)</value>
  </data>
  <data name="FileTypeRequired" xml:space="preserve">
    <value>The File type for attachment required.</value>
  </data>
  <data name="ImageFormatRequired" xml:space="preserve">
    <value>The supported format for the Image is required.</value>
  </data>
  <data name="ImageInformationRequired" xml:space="preserve">
    <value>The Image Information is required.</value>
  </data>
  <data name="ImageTitleRequired" xml:space="preserve">
    <value>Please provide the Image Title.</value>
  </data>
  <data name="InvalidBrandId" xml:space="preserve">
    <value>Provide a valid brand ID</value>
  </data>
  <data name="InvalidFormat" xml:space="preserve">
    <value>The given format is not valid.</value>
  </data>
  <data name="InvalidTextTagSize" xml:space="preserve">
    <value>Invalid field size. Field height and width should be greater then 0.</value>
  </data>
  <data name="MessageLengthExceeds" xml:space="preserve">
    <value>The message exceeds the limit of 5000 characters</value>
  </data>
  <data name="PageNumberRquired" xml:space="preserve">
    <value>pageNumber is a required property for FormField and cannot be null</value>
  </data>
  <data name="SameProperty" xml:space="preserve">
    <value>Both title and the document information cannot be present for a single document.</value>
  </data>
  <data name="SignersIsSet" xml:space="preserve">
    <value>Missing required parameter 'signers' when calling DocumentApi-&gt;SendDocument</value>
  </data>
  <data name="TemplateIdNull" xml:space="preserve">
    <value>Parameter {nameof(sendForSignFromTemplate.TemplateId)} should be null or empty</value>
  </data>
  <data name="TitleLengthExceeds" xml:space="preserve">
    <value>The title exceeds the limit of 256 characters</value>
  </data>
  <data name="TitleOrDocumentInfoIsRequired" xml:space="preserve">
    <value>Title or Document Information of the document is required.</value>
  </data>
  <data name="ValidUrl" xml:space="preserve">
    <value>Please provide valid file URL</value>
  </data>
</root>